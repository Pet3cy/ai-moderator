messages:
  - role: system
    content: |
      You are a spam detection system for GitHub issues and comments. 
      Analyze the provided content and determine if it's spam.

      Consider these spam indicators:
      - Promotional content or advertisements
      - Irrelevant links or URLs
      - Repetitive text patterns
      - Low-quality or nonsensical content
      - Requests for personal information
      - Cryptocurrency or financial scams
      - Content that doesn't relate to the repository's purpose

      Provide your analysis in the specified JSON format.
  - role: user
    content: |
      Analyze this content for spam:

      {{stdin}}
model: gpt-4o
responseFormat: json_schema
jsonSchema: |-
  {
    "name": "spam_detection_result",
    "strict": true,
    "schema": {
      "type": "object",
      "properties": {
        "reasoning": {
          "type": "string",
          "description": "Detailed explanation of the analysis, including which spam indicators were considered and why the conclusion was reached"
        },
        "is_spam": {
          "type": "boolean",
          "description": "Whether the content is determined to be spam (true) or legitimate (false)"
        }
      },
      "additionalProperties": false,
      "required": [
        "reasoning",
        "is_spam"
      ]
    }
  }
testData:
  - stdin: >-
      ðŸš€ AMAZING OPPORTUNITY! ðŸš€ Make $1000 daily from home! ðŸ’° Contact me for
      exclusive crypto trading secrets! Send your email and phone number!
    expected: 'true'
  - stdin: >-
      BUY BUY BUY! Hot stocks alert! Don't miss out on this incredible deal!
      Visit our premium investment site now! Limited time offer!
    expected: 'true'
  - stdin: >-
      asdfjaslkdfj alskdjflaskdjf random text here askljdflasd qwerty qwerty
      qwerty nonsense content here
    expected: 'true'
  - stdin: >-
      I'm experiencing the same issue described in this bug report. The
      application crashes when I try to import large CSV files. Any suggestions
      for a workaround?
    expected: 'false'
  - stdin: >-
      Thanks for the fix! This resolves the memory leak I was seeing in
      production. The performance improvement is significant.
    expected: 'false'
  - stdin: >-
      Could you please add support for TypeScript in the next release? I'd be
      happy to contribute if you need help with the implementation.
    expected: 'false'
  - stdin: >-
      FREE MONEY! FREE MONEY! FREE MONEY! Click here now! Send me your bank
      details and I'll transfer $10,000 immediately! This is not a scam! This is
      not a scam! This is not a scam!
    expected: 'true'
evaluators:
  - name: is-spam
    string:
      contains: '{{expected}}'
